plugins {
    id 'com.android.application'
}
apply plugin: 'com.google.gms.google-services'

android {
    // Read local.properties
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream() ;
    properties.load( inputStream )

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "io.agora.chatdemo"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 5
        versionName "1.0.5"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        // If you use your own Agora Chat appkey, you should deploy your own App Server.
        // See:
        buildConfigField ("String", "APP_SERVER_PROTOCOL", "\"https\"")
        buildConfigField ("String", "APP_SERVER_DOMAIN", "\"a41.easemob.com\"")
        //ebs
//        buildConfigField ("String", "APP_SERVER_DOMAIN", "\"a1.easemob.com\"")
        //vip6
//        buildConfigField ("String", "APP_SERVER_DOMAIN", "\"a1-vip6.easemob.com\"")
        buildConfigField ("String", "APP_SERVER_URL", "\"/app/chat/user/login\"")

        buildConfigField ("String", "Agora_AppId", properties.getProperty("AGORA_APPID", "******"))

        manifestPlaceholders = [AGORA_CHAT_APPKEY: properties.getProperty("AGORA_CHAT_APPKEY", "******")]
    }

    signingConfigs {
        debug {
            storeFile file(properties.getProperty('KEY_STORE_FILE_PATH', './keystore/sdkdemo.jks'))
            storePassword properties.getProperty('KEY_STORE_PASSWORD', '123456')
            keyAlias = properties.getProperty('KEY_ALIAS', 'easemob')
            keyPassword properties.getProperty('KEY_PASSWORD', '123456')
        }
        release {
            storeFile file(properties.getProperty('KEY_STORE_FILE_PATH', './keystore/sdkdemo.jks'))
            storePassword properties.getProperty('KEY_STORE_PASSWORD', '123456')
            keyAlias = properties.getProperty('KEY_ALIAS', 'easemob')
            keyPassword properties.getProperty('KEY_PASSWORD', '123456')
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    // use viewBinding
    viewBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    // Google firebase cloud messaging
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:29.1.0')
    // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    // room
    implementation "androidx.room:room-runtime:2.4.0-alpha04"
    annotationProcessor "androidx.room:room-compiler:2.4.0-alpha04"
    // swipe refresh layout
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    // Glide
    implementation 'com.github.bumptech.glide:glide:4.13.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'
    // fresh and load more
    implementation  'com.scwang.smart:refresh-layout-kernel:2.0.3'
    implementation  'com.scwang.smart:refresh-header-material:2.0.3'
    implementation  'com.scwang.smart:refresh-header-classics:2.0.3'
    implementation "com.github.yjfnypeu:EasyAndroid:1.3.2"
    // Agora Chat SDK
    implementation 'io.agora.rtc:chat-sdk:1.0.5'
    // Agora Chat Uikit
    implementation 'io.agora.rtc:chat-uikit:1.0.5'
    implementation 'io.agora.rtc:chat-callkit:1.0.5'
//    implementation project(path: ':chat-uikit')
//    implementation project(path: ':chat-callkit')

}

//afterEvaluate {
//    File file = new File('outputs')
//    delete(file)
//    getTasks().findByName("assembleDebug").finalizedBy(copyApp)
//}
//
//task copyApp(type: Copy) {
//    FileTree tree = fileTree('build/outputs/apk') {
//        include '**/*.apk'
//    }
//    from tree
//    File file = new File('outputs')
//    into file
//}

